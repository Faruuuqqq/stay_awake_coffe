version: '3.8'

services:
  # Layanan untuk aplikasi Node.js Anda
  app:
    build:
      context: . # Konteks build adalah folder saat ini
      dockerfile: Dockerfile # Nama file yang benar (D besar)
    ports:
      - "${APP_PORT}:3000" # Memetakan port dari .env ke port container
    volumes:
      - ./src:/app # Sinkronisasi folder src Anda dengan /app di container
      - /app/node_modules # Mencegah folder node_modules lokal menimpa yang di container
    environment:
      # Semua variabel environment sekarang dibaca dari file .env
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      db:
        condition: service_healthy # Aplikasi baru akan dimulai jika database sudah sehat

  # Layanan untuk database MySQL
  db:
    image: mysql:8.4
    ports:
      - "${DB_PORT}:3306" # Memetakan port dari .env ke port container
    environment:
      # Variabel untuk setup database MySQL, dibaca dari .env
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # Password ini sekarang sinkron dengan layanan app
    volumes:
      - db_data:/var/lib/mysql # Menyimpan data database secara persisten
    healthcheck:
      # Pengecekan untuk memastikan database siap menerima koneksi
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Definisi volume untuk persistensi data database
volumes:
  db_data: